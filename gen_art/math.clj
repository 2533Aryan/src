;-----------------------------------------------------------------------------------------------------------------------
; Name: ARYAN RAVAL
; Project: Generate Art using Neural Networks.
;-----------------------------------------------------------------------------------------------------------------------
; This file contains all the functions which will help to do the math for our neural networks
;-----------------------------------------------------------------------------------------------------------------------
(ns gen-art.math)


;-----------------------------------------------------------------------------------------------------------------------
; vec* function:
;-----------------------------------------------------------------------------------------------------------------------
(defn vec*
  ([a] a)
  ([a b] (map * a b))
  ([a b & more] (reduce vec* (vec* a b) more)))

;-----------------------------------------------------------------------------------------------------------------------
; Description:
; This function will multiply two vectors.
;-----------------------------------------------------------------------------------------------------------------------
; Example:
; (vec* [1] [2])      => (2)
; (vec* [1 2] [0 2])  => (0 4)
;-----------------------------------------------------------------------------------------------------------------------




;-----------------------------------------------------------------------------------------------------------------------
; vec- function:
;-----------------------------------------------------------------------------------------------------------------------
(defn vec-
  ([a] a)
  ([a b] (map - a b))
  ([a b & more] (reduce vec- (vec- a b) more)))

;-----------------------------------------------------------------------------------------------------------------------
; Description:
; This function will subtract two vectors.
;-----------------------------------------------------------------------------------------------------------------------
; Example:
; (vec- [2] [1])     => (1)
; (vec- [0 2] [2 1]) => (-2 1)
;-----------------------------------------------------------------------------------------------------------------------




;-----------------------------------------------------------------------------------------------------------------------
; dot function:
;-----------------------------------------------------------------------------------------------------------------------
(defn dot [v1 v2]
  (reduce + (vec* v1 v2)))

;-----------------------------------------------------------------------------------------------------------------------
; Description:
; This function will return the dot product of two vectors.
;-----------------------------------------------------------------------------------------------------------------------
; Example:
; (dot [1] [2])     => 2
; (dot [1 1] [2 5]) => 7
;-----------------------------------------------------------------------------------------------------------------------




;-----------------------------------------------------------------------------------------------------------------------
; matrix* function:
;-----------------------------------------------------------------------------------------------------------------------
(defn matrix* [m v]
  (map #(dot v %) m))

;-----------------------------------------------------------------------------------------------------------------------
; Description:
; This function will return the matrix product.
;-----------------------------------------------------------------------------------------------------------------------
; Example:
; (matrix* [[2 1] [1 2]] [1 2]) => (4 5)
;-----------------------------------------------------------------------------------------------------------------------




;-----------------------------------------------------------------------------------------------------------------------
; abs-value function:
;-----------------------------------------------------------------------------------------------------------------------
(defn abs-value [x]
  (if (< x 0) (- x) x))

;-----------------------------------------------------------------------------------------------------------------------
; Description:
; This function will return the non-negative value of x (number passed as argument)
; without regard to its sign.
;-----------------------------------------------------------------------------------------------------------------------
; Example:
; (abs-value -4)   => 4
;-----------------------------------------------------------------------------------------------------------------------




;-----------------------------------------------------------------------------------------------------------------------
; NOTE:
;-----------------------------------------------------------------------------------------------------------------------
; As our neural network uses random elements.
; we need to create random vectors & matrix.
;-----------------------------------------------------------------------------------------------------------------------




;-----------------------------------------------------------------------------------------------------------------------
; rand-vec function:
;-----------------------------------------------------------------------------------------------------------------------
(defn rand-vec [n]
  (repeatedly n #(if (< (rand) 0.5) (rand) (- (rand)))))
;-----------------------------------------------------------------------------------------------------------------------
; Description:
; This function will return random vectors of size "n".
;-----------------------------------------------------------------------------------------------------------------------
; Example:
; (rand-vec 5)
; => (0.6677048932030843 -0.15116460809140686 -0.9916541939897388 0.5607021453486719 -0.3397715866942044)
;-----------------------------------------------------------------------------------------------------------------------




;-----------------------------------------------------------------------------------------------------------------------
; rand-matrix function:
;-----------------------------------------------------------------------------------------------------------------------
(defn rand-matrix [n m]
  (repeatedly n #(rand-vec m)))

;-----------------------------------------------------------------------------------------------------------------------
; Description:
; This function will return a random matrix of size "n*m".
;-----------------------------------------------------------------------------------------------------------------------
; Example:
; (rand-matrix  1 2)  => ((0.5108696153734513 -0.8895296477151065))
;-----------------------------------------------------------------------------------------------------------------------




;-----------------------------------------------------------------------------------------------------------------------
; NOTE:
;-----------------------------------------------------------------------------------------------------------------------
; We need two transfers function for our neural network

; These are the basic mathematical functions used in Neural Network models.
; This function is placed as the last layer of a machine learning model.

; First: sigmoid (sig) function
; It can serve to convert the model's output into a probability score
; It returns value between "0 & 1".

; Second: tangent hyperbolic (tanh) function
; This function returns value between "-1 & 1".
; Thus regulating the output of the neural network.
;-----------------------------------------------------------------------------------------------------------------------




;-----------------------------------------------------------------------------------------------------------------------
; First: sigmoid function
;-----------------------------------------------------------------------------------------------------------------------
(defn sig [x]
  (/ 1 (+ 1 (Math/exp (- (* x 5))))))

;-----------------------------------------------------------------------------------------------------------------------
; Description:
; This function will return value between "0 & 1".
; Equivalent to 1/(1 + e^-x).
;-----------------------------------------------------------------------------------------------------------------------
; Example:
; (sig 5)    => 0.999999999986112
;-----------------------------------------------------------------------------------------------------------------------




;-----------------------------------------------------------------------------------------------------------------------
; Second: tangent hyperbolic function
;-----------------------------------------------------------------------------------------------------------------------
(defn tanh [x]
  (- (* 2 (sig (* 2 x))) 1))

;-----------------------------------------------------------------------------------------------------------------------
; Description:
; This function will return value between "-1 & 1".
; Equivalent to (2 * sig * 2 x) - 1.
;-----------------------------------------------------------------------------------------------------------------------
; Example:
; (tanh 5)    =>  1.0
; (tanh -5)   => -1.0
; (tanh 0)    =>  0.0
;-----------------------------------------------------------------------------------------------------------------------
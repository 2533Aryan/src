 ;-----------------------------------------------------------------------------------------------------------------------
; Name: ARYAN RAVAL
; Project: Generate Art using Neural Networks.
;-----------------------------------------------------------------------------------------------------------------------
; This file "core" (main file) will draw art by connecting network, math, and quil.
;-----------------------------------------------------------------------------------------------------------------------
; Prerequisite:
; Need "gen-art.math" (math.clj) library for performing math functions.
; Need "gen-art.network" (network.clj) library for our neural networks.
; Need "quil.core" (import quil) library for drawing (displaying) our art.
;-----------------------------------------------------------------------------------------------------------------------
; NOTE:
;-----------------------------------------------------------------------------------------------------------------------
; It will take some time (maybe 5-10 minutes) to generate art.
; So please don't stop the execution.
;-----------------------------------------------------------------------------------------------------------------------
(ns gen_art.core
    (:require [quil.core :as q :refer :all])
    (:require [gen-art.math :refer :all])
    (:require [gen-art.network :refer :all]))




;-----------------------------------------------------------------------------------------------------------------------
; Initial Set-up:
;-----------------------------------------------------------------------------------------------------------------------
; Window: 500X500 pixels
(def res-x 500)
(def res-y 500)

; Steps: incrementation steps
(def steps 200)

;-----------------------------------------------------------------------------------------------------------------------
; Description:
; Defining dimensions of our art window.
;-----------------------------------------------------------------------------------------------------------------------




;-----------------------------------------------------------------------------------------------------------------------
; xfn & yfn function:
;-----------------------------------------------------------------------------------------------------------------------
(defn xfn [x] (Math/cos (* Math/PI x)))
(defn yfn [y] (Math/sin (* Math/PI y)))

;-----------------------------------------------------------------------------------------------------------------------
; Description:
; This function will be like a normalization functions.
; Normalization functions: take inputs and normalize them
; based on values of "x" and "y".
;-----------------------------------------------------------------------------------------------------------------------




;-----------------------------------------------------------------------------------------------------------------------
; inputs variable:
;-----------------------------------------------------------------------------------------------------------------------
(def inputs [
             [1 1 (xfn 1) (yfn 1)]
             [1 0 (xfn 1) (yfn 0)]
             [1 1 (xfn 0) (yfn 1)]
             [0 0 (xfn 0) (yfn 0)]])

;-----------------------------------------------------------------------------------------------------------------------
; Description:
; This variable stores inputs for our neural network.
; Here we used exclusive-or pattern: 1100 and 1010.
; Then we normalized them.
;-----------------------------------------------------------------------------------------------------------------------




;-----------------------------------------------------------------------------------------------------------------------
; outputs variable:
;-----------------------------------------------------------------------------------------------------------------------
(def outputs [[0 0 0] [1 1 1] [1 1 1] [0 0 0]])

;-----------------------------------------------------------------------------------------------------------------------
; Description:
; This variable stores the output values which we expect to get from our neural network.
;-----------------------------------------------------------------------------------------------------------------------




;-----------------------------------------------------------------------------------------------------------------------
; NOTE:
;-----------------------------------------------------------------------------------------------------------------------
; Here, we are defining our input and sending them into our neural network.
; Our input in this model are: 1100 and 1010.

; Then we have outputs (000,111,111,000) which are expected outputs (we expect to get from neural network).

; Our network will try to get as close to these numbers as possible.
; Based on the amount of runs, it should get closer and closer to these numbers.
;-----------------------------------------------------------------------------------------------------------------------




;-----------------------------------------------------------------------------------------------------------------------
; rand-net function:
;-----------------------------------------------------------------------------------------------------------------------
(defn rand-net []
  [(layer 4 10 tanh false)
   (layer 20 20 tanh true)
   (layer 20 20 tanh true)
   (layer 20 20 tanh true)
   (layer 10 3 sig true)])

;-----------------------------------------------------------------------------------------------------------------------
; Description:
; This function will generate random network with layers.
; Here we have 5 layers.
; Each layer have: number of inputs, neurons, transfer function, and bias.
;-----------------------------------------------------------------------------------------------------------------------




;-----------------------------------------------------------------------------------------------------------------------
; trained-net function:
;-----------------------------------------------------------------------------------------------------------------------
(defn trained-net []
  (hill-climb (rand-net) inputs outputs steps))

;-----------------------------------------------------------------------------------------------------------------------
; Description:
; This function trained networks.
;-----------------------------------------------------------------------------------------------------------------------




;-----------------------------------------------------------------------------------------------------------------------
; draw-fn function:
;-----------------------------------------------------------------------------------------------------------------------
(defn draw-fn [x y net]
  (let [x-norm (/ x res-x)
        y-norm (/ y res-y)
        [r g b] (feed-forward net [x-norm y-norm (xfn x-norm) (yfn y-norm)])]
    [(* r 255) (* g 255) (* b 255)]))

;-----------------------------------------------------------------------------------------------------------------------
; Description:
; This function is a Draw function (basically draw our art).
; We are inputting areas of our screen (to be drawn) and outputting colors.
;-----------------------------------------------------------------------------------------------------------------------




;-----------------------------------------------------------------------------------------------------------------------
; setup function:
;-----------------------------------------------------------------------------------------------------------------------
(defn setup []
  (q/background 255)
  (q/stroke-weight 2))

;-----------------------------------------------------------------------------------------------------------------------
; Description:
; This function will set our window.
; Background: White.
;-----------------------------------------------------------------------------------------------------------------------




;-----------------------------------------------------------------------------------------------------------------------
; draw function:
;-----------------------------------------------------------------------------------------------------------------------
(defn draw []
  (let [net (trained-net)]
    (doseq [x (range res-x) y (range res-y)]
      (do
        (let [[r g b] (draw-fn x y net)]
          (q/stroke-float r g b))
        (q/point x y)))
    (save-frame "render-#####.png")))

;-----------------------------------------------------------------------------------------------------------------------
; Description:
; This function will actually draw the art on the window.
; It also save every single frame (that is generated by neural network).
;-----------------------------------------------------------------------------------------------------------------------




;-----------------------------------------------------------------------------------------------------------------------
; defsketch quill evaluation:
;-----------------------------------------------------------------------------------------------------------------------
(q/defsketch leaf
             :host "host"
             :size [res-x res-y]
             :setup setup
             :draw draw)

;-----------------------------------------------------------------------------------------------------------------------
; Description:
; Sketch function: initiating required variables to sketch (draw our art)
; Drawing with Quil.
;-----------------------------------------------------------------------------------------------------------------------




;-----------------------------------------------------------------------------------------------------------------------
; main function:
;-----------------------------------------------------------------------------------------------------------------------
(defn -main [& args])
